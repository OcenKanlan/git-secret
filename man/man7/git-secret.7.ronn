## Usage

These steps cover the basic process of using `git-secret`:

0. Before starting, make sure you have created `gpg` RSA key-pair: public and secret key identified by your email address.
1. Initialize `git-secret` repository by running `git secret init` command. `.gitsecret/` folder will be created, **note** that `.gitsecret/` folder with the exception of the random_seed file [should **not** ignored via inclusion in your .gitignore file](https://github.com/sobolevn/git-secret/issues/39).
2. Add first user to the system by running `git secret tell your@gpg.email`.
3. Now it's time to add files you wish to encrypt inside the `git-secret` repository. It can be done by running `git secret add <filenames...>` command. Make sure these files are ignored by mentions in .gitignore, otherwise `git-secret` won't allow you to add them, as these files could be stored unencrypted.
4. When done, run `git secret hide` to encrypt all files which you have added by the `git secret add` command.  The data will be encrypted with the public-keys described by the `git secret tell` command. After using `git secret hide` to encrypt your data, it is safe to commit your changes. **NOTE:**. It's recommended to add `git secret hide` command to your `pre-commit` hook, so you won't miss any changes.
5. Later you can decrypt files with the `git secret reveal` command, or just show their contents to strdout with the `git secret cat` command. If you used a password on you GPG key (always recommended), it will ask you for your password. And you're done!

### I want to add someone to the repository

1. Get their `gpg` public-key. **You won't need their secret key.**
2. Import this key inside your `gpg` setup (in ~/.gnupg or similar) by running `gpg --import KEY_NAME`
3. Now add this person to your secrets repo by running `git secret tell persons@email.id`
4. Then re-encrypt the files using `git secret reveal; git secret hide -d`. (The -d options deletes the unencrypted file after re-encrypting it). Now the newly added user be able to decrypt them using `git-secret` and their secret key.

Note that it is possible to add yourself to the system without decrypting existing files. It will be possible to decrypt them after reencrypting them with the new keyring. So, if you don't want unexpected keys added, make sure to configure some server-side security policy with the `pre-receive` hook.

## Configuration

You can configure several things to suit your workflow better. To do so, just set the required variable to the value you need. This can be done in your shell environment file or with the each `git-secret` command.

These settings are available to be changed:

* `$SECRETS_GPG_COMMAND` - sets the `gpg` alternatives, defaults to `gpg`. It can be changed to `gpg`, `gpg2`, `pgp`, `/usr/local/gpg` or any other value. After doing so rerun the tests to be sure that it won't break anything. Tested to be working with: `gpg`, `gpg2`.
* `$SECRETS_EXTENSION` - sets the secret files extension, defaults to `.secret`. It can be changed to any valid file extension.

## Internals -- the `.gitsecret` folder

This folder contains all the information about the data encrypted in this repo. Use the 'git secret' commands to manipulate these files, you should not change the data in these files directly.

The data is separated into two directories:

### `.gitsecret/paths`

which currently contains only the file `mapping.cfg`, which lists all the files your storing encrypted.
In other words, the path mappings: what files are tracked to be hidden and revealed.

All the other internal data is stored in the directory:

### `.gitsecret/keys`

This folder contains data used by git-secret and PGP to allow and maintain the correct encyption and access rights for the allowed parties. 

Generally speaking, all the files in this directory except `random_seed` should be checked into your secrets repo.  
By default, `git secret init` will add the file `.gitsecret/keys/random_seed` to your .gitignore file.
